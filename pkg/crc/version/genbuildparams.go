//go:build genbuildparams
// +build genbuildparams

// This program generates pkg/version/helper-paths.go and is invoked through
// 'go generate'

package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"text/template"
)

type Helper struct {
	Name string
	Path string
}

func parseBuildParams() ([]Helper, error) {
	var helpers []Helper
	if len(os.Args) > 2 {
		return nil, fmt.Errorf("Too many arguments (%d)", len(os.Args))
	}
	if len(os.Args) == 1 || (len(os.Args) == 2 && os.Args[1] == "") {
		return helpers, nil
	}
	jsonData, err := os.ReadFile(os.Args[1]) // the file is inside the local directory
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal(jsonData, &helpers)
	if err != nil {
		return nil, err
	}

	return helpers, err
}

func generateCode(filename string, helpers []Helper) error {
	f, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Helpers []Helper
	}{
		Helpers: helpers,
	})

	return nil
}

func main() {
	helpers, err := parseBuildParams()
	die(err)

	err = generateCode("helpers_generated.go", helpers)
	die(err)
}

func die(err error) {
	if err != nil {
		log.Fatalf("gen-build-parameters failed: %v", err)
	}
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by gen-build-parameters
package version

type helper struct {
	name string
	path string
}

var helpers = []helper{
{{- range .Helpers }}
	{
		name: {{ printf "%q" .Name }},
		path: {{ printf "%q" .Path }},
	},
{{- end }}
}
`))
